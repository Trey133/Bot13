{
  "name": "wolfram-node",
  "version": "0.0.1",
  "description": "NodeJS Wrapper for Wolfram Alpha API",
  "main": "index.js",
  "dependencies": {
    "async": "~0.9.0",
    "restler": "~3.2.2",
    "xml2js": "~0.4.4"
  },
  "devDependencies": {
    "mocha": "~1.20.0"
  },
  "scripts": {
    "test": "mocha ./test/test.js"
  },
  "keywords": [
    "node-wolfram",
    "wolfram-api",
    "node-wolfram-api"
  ],
  "author": {
    "name": "Raghav"
  },
  "license": "MIT",
  "readme": "node-wolfram - Wolfram | Alpha API Wrapper for Node\n=================================================\n\nnode-wolfram provides a simple API wrapper to use the Wolfram | Alpha service for NodeJS.\n\nAPI\n---\n\n### ask(data, callback) \n\nUsed to set the query and make a request to Wolfram | Alpha and returns the result in JSON\n\n#### data\n\n* `query` - The actual input to be queried to Wolfram | Alpha\n* `assumption` - Applies an assumption to the query.\n* `translation` - Used to set the automatic translation to English. Defaults to `false`\n* `reinterpret` - Used to reinterpret the query if Wolfram | Alpha does not understand. Defaults to `false`\n* `primary` - Used to display the closest thing to a simple \"answer\" that Wolfram|Alpha can provide. Defaults to `true`\n\n### getResults(callback)\n\nUsed to get the results for the given query in JSON\n\n### getQuery(callback)\n\nUsed to return the query that is currently being set\n\n### getPod(callback)\n\nUsed to return the Pod from the Query Results\n\nExample Usage\n-------------\n\nYou will need an application ID to access the Wolfram | Alpha API. You can get it by signing up on [Wolfram | Alpha Developer](http://products.wolframalpha.com/api/)\n\n```javascript \nvar wolfram = require('./').init('APPLICATION_ID');\n\nvar data = {\n\t\n\tquery : 'pi',\n\tassumption: '*C.pi-_*Movie-'\n\n};\n\nwolfram.ask(data, function(err, results) {\n\tif(err)\n\t\tthrow err;\n\n\t//Do something interesting with your data\n\t//or simply display it\n\tconsole.log(util.inspect(results, false, null));\n});\n\nwolfram.getPod(function(err, results) {\n\tif(err)\n\t\tthrow err;\n\n\t//Access the Pods here\n\tconsole.log(util.inspect(results, false, null));\n});\n\nwolfram.getQuery(function(err, query) { \n\tif(err)\n\t\tthrow err;\n\n\t//Returns the Query currently being set\n\t//\t{\n\t//\t\tinput: 'pi',\n\t// \t\tassumption: '*C.pi-_*Movie-',\n\t// \t\ttranslation: false,\n\t// \t\treinterpret: false,\n\t// \t\tprimary: true,\n\t// \t\tappid: '***********' \n\t// \t}\n\t\n});\n\n```\n\nTests\n-----\n\nInstall Mocha `$ npm install -g mocha`\nRun Test `$APPID = 'YOUR_APP_ID' npm test`\n\nLicense\n-------\n\nMIT\n",
  "readmeFilename": "README.md",
  "_id": "wolfram-node@0.0.1",
  "dist": {
    "shasum": "f6a49944f3b0b4bb380911a9ea7e8b3d1c3f96f6"
  },
  "_from": "wolfram-node@*",
  "_resolved": "https://registry.npmjs.org/wolfram-node/-/wolfram-node-0.0.1.tgz"
}
